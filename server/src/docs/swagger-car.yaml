openapi: 3.0.0
info:
  title: Car Management API
  description: API endpoints for managing car listings
  version: 1.0.0

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Car:
      type: object
      properties:
        _id:
          type: string
          description: The auto-generated id of the car
        title:
          type: string
          description: Title of the car listing
        description:
          type: string
          description: Detailed description of the car
        car_type:
          type: string
          description: Type of the car
        company:
          type: string
          description: Car manufacturing company
        dealer:
          type: string
          description: Dealer information
        owner:
          type: string
          description: ID of the user who owns this listing
        images:
          type: array
          items:
            type: object
            properties:
              url:
                type: string
                description: URL of the uploaded image
              public_id:
                type: string
                description: Public ID of the image in Cloudinary

security:
  - BearerAuth: []

paths:
  /cars:
    post:
      summary: Create a new car listing
      tags:
        - Cars
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                car_type:
                  type: string
                company:
                  type: string
                dealer:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: Car created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "400":
          description: Bad request
        "401":
          description: Unauthorized

    get:
      summary: Get all cars for the authenticated user
      tags:
        - Cars
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search term for filtering cars
      responses:
        "200":
          description: List of cars
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Car"
        "500":
          description: Server error
        "401":
          description: Unauthorized

  /cars/{id}:
    get:
      summary: Get a specific car by ID
      tags:
        - Cars
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The car ID
      responses:
        "200":
          description: Car details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "404":
          description: Car not found
        "401":
          description: Unauthorized
        "500":
          description: Server error

    patch:
      summary: Update a car listing
      tags:
        - Cars
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The car ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                car_type:
                  type: string
                company:
                  type: string
                dealer:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "200":
          description: Car updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "404":
          description: Car not found
        "400":
          description: Bad request
        "401":
          description: Unauthorized

    delete:
      summary: Delete a car listing
      tags:
        - Cars
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The car ID
      responses:
        "200":
          description: Car deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Car"
        "404":
          description: Car not found
        "401":
          description: Unauthorized
        "500":
          description: Server error
